AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: "AWS resources for a serverless security system"

Parameters:
  PresignUrlExpirationTime:
    Type: Number
    Description: The number (in seconds) that presigned url's are valid for. Note that this can is the default and can be later updated within the user interface # TODO - implement that functionality
    Default: 3600

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain TODO - restore this

  S3BucketClientAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Serverless-Security-System-S3-Write-Access-Policy-${AWS::StackName}'
      Description: 'Managed policy that allows write (and limited read) access to the S3 bucket used for the Serverless-Security-System'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:PutObject', 's3:PutObjectAcl' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  IAMUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: !Sub '${AWS::StackName}-client-user'
      Path: '/apps/'
      ManagedPolicyArns: 
        - !Ref S3BucketClientAccessManagedPolicy
      Tags: 
        - Key: 'Description'
          Value: 'IAM User for accessing S3 bucket for Serverless-Security-System.'

  IAMPermissionsBoundary:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'IAM-S3-Only-PermissionsBoundary-${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Users:
        - !Ref IAMUser

  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  AccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-client-user-access-key-secret'
      Description: !Sub 'Access Key Secret for ${IAMUser} user'
      SecretString: !Sub '{"AccessKeyId":"${IAMUserAccessKey}","SecretAccessKey":"${IAMUserAccessKey.SecretAccessKey}"}'


  # Serverless API composed of a lambda function
  APILambdaFnAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Serverless-Security-System-S3-read-write-delete-access-Policy-${AWS::StackName}'
      Description: 'Managed policy that allows appropriate access to S3 and Lambda for the Serverless-Security-System'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:ListObjects*', 's3:ListBucket' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: Allow
            Action: [ 's3:PutObject', 's3:PutObjectAcl' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'
          - Effect: Allow
            Action: [ 's3:Describe*', 's3:Get*' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          - Effect: Allow
            Action: [ 'lambda:UpdateFunctionConfiguration' ]
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-api'

  APIFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub 'Role for the lambda functions that make up the serverless API for ${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref APILambdaFnAccessManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  APILambdaFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-api' # Do not change this without updating APILambdaFnAccessManagedPolicy's reference
      CodeUri: lambda/
      Handler: api.handler
      Runtime: python3.8
      PackageType: Zip
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          PRESIGN_URL_EXPIRATION_TIME: !Ref PresignUrlExpirationTime
          FUNCTION_NAME: !Sub '${AWS::StackName}-api'
      Role: !GetAtt APIFunctionRole.Arn
      Events:
        GetVideos:
          Type: Api
          Properties:
            Path: /videos/{filter} # current supported routes are /all, /motion, and /motionless
            Method: GET
        GetConfiguration:
          Type: Api
          Properties:
            Path: /configuration
            Method: GET
        UpdateConfiguration:
          Type: Api
          Properties:
            Path: /configuration
            Method: POST
      Timeout: 10


  # TODO - create a custom resource to grab the API Gateway URL that was generated by the serverless function for the API - this will be needed for the frontend to know what the backend is


Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Description: The name of the stacks S3 bucket where videos are stored.

