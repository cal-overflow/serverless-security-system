AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: "AWS resources for a serverless security system"

Parameters:
  StackManagementS3Bucket:
    Type: String
    Description: The name of the stack S3 bucket (for storing lambda source code)

  APILambdaFnS3Key:
    Type: String
    Description: The object key of the source code for the Serverless API lambda function.

  StaleVideoRemoverFunctionS3Key:
    Type: String
    Description: The object key of the source code for the StaleVideoRemoverLambdaFn lambda function.

  UploadHandlerFunctionS3Key:
    Type: String
    Description: The object key of the source code for the UploadHandlerLambdaFn lambda function.

  AttachLambdaS3NotificationTriggerFunctionS3Key:
    Type: String
    Description: The object key of the source code for the AttachLambdaS3NotificationTriggerLambdaFn lambda function.

  # Optional parameters
  PresignUrlExpirationTime:
    Type: Number
    Description: The number (in seconds) that presigned url's are valid for. Note that this can is the default and can be later updated within the user interface.
    Default: 604800

  UserTokenExpirationTime:
    Type: Number
    Description: The number (in seconds) that user's authentication tokens are valid for.
    Default: 2419200 # 4 weeks

  CachePolicyId:
    Type: String
    Default: 658327ea-f89d-4fab-a63d-7e88639e58f6 # id for the caching optimized policy
    # See more policies at https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policies-list

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain TODO - restore this

  S3BucketClientAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Serverless-Security-System-S3-Write-Access-Policy-${AWS::StackName}'
      Description: 'Managed policy that allows write (and limited read) access to the S3 bucket used for the Serverless-Security-System'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action: [ 's3:Delete*' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          - Effect: Allow
            Action: [ 's3:PutObject', 's3:PutObjectAcl' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/footage/*'
          - Effect: Deny
            Action: [ 's3:Put*' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'
          - Effect: Allow
            Action: [ 's3:GetObject' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'
          - Effect: Deny
            Action: [ 's3:Put*' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'

  # Ensure the S3 bucket has permissions to invoke the upload-handler lambda function
  LambdaS3BucketEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      SourceAccount: !Ref 'AWS::AccountId'
      FunctionName: !Ref UploadHandlerLambdaFn
      SourceArn: !GetAtt S3Bucket.Arn
      Principal: s3.amazonaws.com

  IAMUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: !Sub '${AWS::StackName}-client-user'
      Path: '/apps/'
      ManagedPolicyArns: 
        - !Ref S3BucketClientAccessManagedPolicy
      Tags: 
        - Key: 'Description'
          Value: 'IAM User for accessing S3 bucket for Serverless-Security-System.'

  IAMPermissionsBoundary:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'IAM-S3-Only-PermissionsBoundary-${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Users:
        - !Ref IAMUser

  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  AccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-client-user-access-key-secret'
      Description: !Sub 'Access Key Secret for ${IAMUser} user'
      SecretString: !Sub '{"AccessKeyId":"${IAMUserAccessKey}","SecretAccessKey":"${IAMUserAccessKey.SecretAccessKey}"}'




  # Serverless API composed of a lambda function, dynamodb (for remembering users and their access pins)
  UserDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PROVISIONED # TODO - consider switching to PAY_PER_REQUEST
      ProvisionedThroughput: 
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      AttributeDefinitions: 
        - AttributeName: name
          AttributeType: S
        - AttributeName: token
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TokenIndex
          KeySchema: 
            - AttributeName: token
              KeyType: HASH
          Projection: 
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3

  APILambdaFnAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Managed policy that allows appropriate access to various AWS resources for the Serverless-Security-System servless API.'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:ListObjects*', 's3:ListBucket' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: Allow
            Action: [ 's3:PutObject', 's3:PutObjectAcl' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'
          - Effect: Allow
            Action: [ 's3:Describe*', 's3:Get*' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          - Effect: Allow
            Action: [ 'lambda:UpdateFunctionConfiguration' ]
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-api'
          - Effect: Allow
            Action: [ 'dynamodb:Get*', 'dynamodb:Scan', 'dynamodb:PutItem', 'dynamodb:DeleteItem' ]
            Resource: !Sub 'arn:aws:dynamodb:*:*:table/${UserDynamoTable}'
          - Effect: Allow
            Action: [ 'dynamodb:Query' ]
            Resource: !Sub 'arn:aws:dynamodb:*:*:table/${UserDynamoTable}/index/*'
          - Effect: Allow
            Action: [ 'lambda:InvokeFunction' ]
            Resource: !GetAtt StaleVideoRemoverLambdaFn.Arn

  APIFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub 'Role for the lambda functions that make up the serverless API for ${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref APILambdaFnAccessManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  APILambdaFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-api' # Do not change this without updating APILambdaFnAccessManagedPolicy's reference
      # CodeUri: lambda/api/
      CodeUri: 
        Bucket: !Ref StackManagementS3Bucket
        Key: !Ref APILambdaFnS3Key
      Handler: index.handler
      Runtime: python3.8
      PackageType: Zip
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          USERS_TABLE: !Ref UserDynamoTable
          PRESIGN_URL_EXPIRATION_TIME: !Ref PresignUrlExpirationTime
          USER_TOKEN_EXPIRATION_TIME: !Ref UserTokenExpirationTime
          FUNCTION_NAME: !Sub '${AWS::StackName}-api'
          VIDEO_PURGER_FUNCTION_NAME: !Ref StaleVideoRemoverLambdaFn
      Role: !GetAtt APIFunctionRole.Arn
      Timeout: 30
      FunctionUrlConfig: # Necessary for outputing APIUrl (needed for frontend)
        AuthType: NONE
        Cors:
          AllowCredentials: False
          AllowOrigins:
            - '*' # TODO - make this reference the frontend cloudfront domain
          AllowHeaders: 
            - '*'
          AllowMethods:
            - 'GET'
            - 'POST'
            - 'PATCH'
            - 'PUT'
            - 'DELETE'



  # The various resources required for auto-deleting old (motionless) videos with a Lambda function. The function is triggered daily.
  StaleVideoRemoverLambdaFnAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Managed policy that allows appropriate access to S3 for the Serverless-Security-System to purge stale video files.'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:ListObjects*', 's3:ListBucket', 's3:GetObject' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: Allow
            Action: [ 's3:ListObjects*', 's3:ListBucket', 's3:GetObject' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          - Effect: Allow
            Action: [ 's3:DeleteObject' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/footage/normal/*'
          - Effect: Deny
            Action: [ 's3:Put*', 's3:DeleteObject' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'

  StaleVideoRemoverFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref StaleVideoRemoverLambdaFnAccessManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  StaleVideoRemoverLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-stale-video-remover'
      Handler: index.handler
      Runtime: python3.8
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Role: !GetAtt StaleVideoRemoverFunctionRole.Arn
      Timeout: 20
      Code:
        S3Bucket: !Ref StackManagementS3Bucket
        S3Key: !Ref StaleVideoRemoverFunctionS3Key


  DailyTriggerEvent:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub '${AWS::StackName}-stale-video-remover-lambda-fn-daily-trigger'
      Description: !Sub 'A cloudwatch event that triggers the stale video remover lambda function in ${AWS::StackName}'
      ScheduleExpression: cron(0 0 * * ? *) # Every day at 00:00
      Targets: 
        - Id: VideoRemoverLambdaFn
          Arn: !GetAtt StaleVideoRemoverLambdaFn.Arn

  DailyTriggerEventLambdaInvocationPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref StaleVideoRemoverLambdaFn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DailyTriggerEvent.Arn



  # The various resources for a Lambda function that processes uploads - This is used for updating client information (if a client is online, offline, last-known IP address, etc.)

  UploadHandlerLambdaFnAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Managed policy that allows appropriate access to S3 for the Serverless-Security-System to handle file uploads and manage client data.'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:ListObjects*', 's3:ListBucket' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: Allow
            Action: [ 's3:PutObject', 's3:PutObjectAcl' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/configuration/*'
          - Effect: Allow
            Action: [ 's3:Describe*', 's3:Get*' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  UploadHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub 'Role for the lambda functions that make up the serverless API for ${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref UploadHandlerLambdaFnAccessManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  UploadHandlerLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-client-upload-handler'
      Handler: index.handler
      Runtime: python3.8
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Role: !GetAtt UploadHandlerFunctionRole.Arn
      Timeout: 10
      Code:
        S3Bucket: !Ref StackManagementS3Bucket
        S3Key: !Ref UploadHandlerFunctionS3Key

   # These resources are needed to add an event "notification" that triggers UploadHandlerLambdaFn every time S3 event occurs (i.e., file upload) - this is needed because without it circular dependencies occur
  # From: https://aws.amazon.com/blogs/mt/resolving-circular-dependency-in-provisioning-of-amazon-s3-buckets-with-aws-lambda-event-notifications/
  ApplyNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: / # TODO - see if this is needed
      Policies:
        - PolicyName: S3BucketNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBucketNotification
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  AttachLambdaS3NotificationTriggerFn:
    Type: AWS::Lambda::Function
    Properties:
      Description: Attach S3 event (notification) as the lambda function trigger for the client upload handler function.
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt 'ApplyNotificationFunctionRole.Arn'
      Timeout: 240
      Code:
        S3Bucket: !Ref StackManagementS3Bucket
        S3Key: !Ref AttachLambdaS3NotificationTriggerFunctionS3Key


  # This is what invoke's the AttachLambdaS3NotificationTrigger lambda function - attaching the s3 bucket event (notifications) as a trigger for the lambda function
  InvokeS3EventLambdaTriggerFn:
    Type: Custom::InvokeS3EventLambdaTriggerFn
    Properties:
      ServiceToken: !GetAtt AttachLambdaS3NotificationTriggerFn.Arn
      S3Bucket: !Ref S3Bucket
      FunctionARN: !GetAtt UploadHandlerLambdaFn.Arn
      NotificationId: S3ObjectCreatedEvent


  # The below resources are for the frontend (site) for the system
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "200.html"

  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Action: 's3:GetObject', 's3:ListBucket'
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Resource: 
              - !Sub 'arn:aws:s3:::${FrontendS3Bucket}'
              - !Sub 'arn:aws:s3:::${FrontendS3Bucket}/*'
          
  FrontendCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::CloudFrontOriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-origin-access-control'
        Comment: !Sub 'Origin access control for ${FrontendS3Bucket.DomainName}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  FrontendCloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'A CloudFront distribution for the static frontend hosted in the ${FrontendS3Bucket} bucket.'
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: !Ref CachePolicyId
          TargetOriginId: !Sub 's3-origin-${FrontendS3Bucket}'
          Compress: true
        Enabled: true
        DefaultRootObject: index.html
        Origins:
        - DomainName: !GetAtt FrontendS3Bucket.DomainName
          Id: !Sub 's3-origin-${FrontendS3Bucket}'
          OriginAccessControlId: !GetAtt FrontendCloudFrontOriginAccessControl.Id
          S3OriginConfig: # Necessary for cloudfront to work with s3 even though OAI is not being used
            OriginAccessIdentity: ''
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'


Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Description: The name of the stacks S3 bucket where videos are stored.
  
  FrontendS3BucketName:
    Value: !Ref FrontendS3Bucket
    Description: The name of the stacks S3 bucket where the user interface is hosted.

  APIUrl:
    Value: !GetAtt APILambdaFnUrl.FunctionUrl
    Description: The serverless API URL

  FrontendUrl:
    Value: !Sub 'https://${FrontendCloudFrontDistro.DomainName}'
    Description: The URL of the frontend's cloudfront distribution.

