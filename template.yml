AWSTemplateFormatVersion: 2010-09-09
Description: "AWS resources for a serverless security system"


Resources:
  S3Bucket:
    Type: AWS::S3::Bucket

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Action: 's3:GetObject'
            Effect: Allow
            Principal: '*'
            Resource: 
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  S3BucketAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'Serverless-Security-System-S3-Write-Access-Policy'
      Description: 'Managed policy that allows write access to the S3 bucket used for the Serverless-Security-System'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:ListBucket' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: Allow
            Action: [ 's3:GetObject', 's3:PutObject', 's3:PutObjectAcl' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  IAMUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: 'security-system-client'
      Path: '/apps/'
      ManagedPolicyArns: 
        - !Ref S3BucketAccessManagedPolicy
      Tags: 
        - Key: 'Description'
          Value: 'IAM User for uploading files to S3 bucket for Serverless-Security-System.'

  IAMPermissionsBoundary:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'IAM-S3-Only-PermissionsBoundary'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Users:
        - !Ref IAMUser

  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  AccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'secury-system-client-user-access-key-secret'
      Description: !Sub 'Access Key Secret for ${IAMUser} user'
      SecretString: !Sub '{"AccessKeyId":"${IAMUserAccessKey}","SecretAccessKey":"${IAMUserAccessKey.SecretAccessKey}"}'

  LambdaFnRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaFnRole'
      Description: !Sub "Execution role for the Process-Videos Lambda function in ${AWS::StackName}"
      ManagedPolicyArns:
        - !Ref LambdaFnPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'

  LambdaFnPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-ProcessVideosLambdaFn-ManagedPolicy'
      Descrition: !Sub 'Managed Policy for the Process-Videos Lambda function in ${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 's3:ListBucket' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: Allow
            Action: [ 's3:GetObject', 's3:PutObject', 's3:PutObjectAcl', 's3:DeleteObject' ]
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  ProcessVideosLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaFnPolicy.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      PackageType: Image
      Code:
        # TODO - update this to use cal-overflow alias once it's approved
        ImageUri: public.ecr.aws/b5g0w5q2/serverless-security-system-process-s3-videos-lambda-fn:latest
      Description: Lambda function that processes (keeps only significant) videos within the S3 bucket
      TracingConfig:
        Mode: Active

Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Description: The name of the stacks S3 bucket.

